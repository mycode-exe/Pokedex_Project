*********************************************************************************************************************

This text file is a way of me documenting my process of building the "Pokedex Project", showing how I try to fix issues that come up with my code, what research & self-education I have done as part of the process, and how I have applied or learnt from this research/self-education.

It is not at all necessary reading to use the project, but might help explain my thought processes and how I ended up with some of the code that I did.

*********************************************************************************************************************

Working on: v0.1.0;
    * Created the initial 'Pokemon' class, and the first 6 Pokemon from the official Pokedex to use as the start of the data(base)
    * Useful as a refresher on the barebones building of a class within Python
    * Due to procedural nature of Python, the code can't access a Pokemon's evolution if it is not defined as a variable before it is called;
    * E.g. - Listing "Ivysaur" in the "Bulbasaur" object's instance, as it does not exist when the bulbasaur object is created/ran - Will need to address this.


Working on: v0.1.1;
    * Decided that each instance/object of the 'Pokemon' class will need to be created before allowing the code to either automatically circle back to add the correct evolutions retroactively, or spend the time doing the updates manually. I'd prefer to do the former than the time intensive latter.
    * While looking to tidy up the code, I've learnt about the 'region Data' comment that allows the collapsing of code within VS Code. 
    * I figured out the way of changing the object's evolution variables manually, but even with just the "original 152" Pokemon, this will lead to a lot of excess time & work spent on something that must be possible to update automatically by conducting a check of the objects variables against the variable names,  or something similar. 

Working on: v0.1.2;
    * My lack of knowledge with Python means I don't have the available vocabulary to know what specific names and terms I should be looking for when trying to Google or search for answers to my errors, or my desires for improvements & features.
    * I tried multiple versions of `if` loops to try and get the code to update the Pokemon objects automatically, with many hours of trying to find the right term to put into Google to find the correct looping method. A post onto StackOverflow did provide a few answers, but none seemed to do what I wanted them to do, and due to my inexperience, I didn't understand what the answers were actually saying either.
    * Discovered the "# region Data" & "endregion" syntax to help organise/tidy the code when not adding to the variable data and remove excess "noise" when working on the code itself. A useful tool that will likely be used in many future projects that contain large amounts of data or code that works silently in the background once created.
    * Further self-education on Classes and related Object Orientated parts of Python code is needed to mean that the background of the project can work, before I move onto the 'tkinter' aspect of the Pokedex Project.

Working on: v0.1.3;
    * Realised that I was using the `for` loop wrong and should be iterating through the dict storing the Pokemon's data. This was also described in an answer on my own StackOverflow question about getting this feature to work, but I didn't understand what it was doing until I discovered it myself.
    * This RealPython article really helped understand how to use the dictionary better: https://realpython.com/iterate-through-dictionary-python/
    * This then lead to:
        * "for key, value in pokemon_database.items():
            if type(value.evolution) == str:
                print(value.name)"
        * Which now prints the names of all of the Pokemon that have a string stored as their 'self.evolution', so I know the iteration works.
    * Learnt that `getattr` and `setattr` can be used to re-assign the data within variables. Now I just need to find a way of using them in my loop to re-assign the variables that contain strings as their "self.evolution" to the matching variable name, so that the class objects can interact.
        * Found this StackOverflow about using 'getattr' and 'setattr': https://stackoverflow.com/questions/6856286/how-to-change-object-variables-in-for-loop-in-python
    * After much experimentation, I got the `for` loop to update pokemon's evolutions to *finally* work. I realised that part of the issue was making the keys for each dictionary entry the Pokemon's pokedex number was part of the problem, and when I changed it to thier name, it meant the loop could compare the name key to the value and find the necessary pairs needed to update.
    * I will still do some study on `getattr` and `setattr` since that will likley prove useful later, but thankfully isn't needed for this project.
    * Learnt that '__str__' and '__repr__' are useful tools when building a class, with 'str' being more useful for user, and 'repr' useful for developer. Added 'repr' method to display variable's instance rather than memory address for better clarity while I create the program.
        * Learnt from "Learn Python OOP in under 20 Minutes" by YouTube channel "Indently" - Found here; https://www.youtube.com/watch?v=rLyYb7BFgQI
    * Next, moving onto the 'tkinter' aspect of the project, which is completely new territory for me.